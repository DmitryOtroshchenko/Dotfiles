"
" This file contains vanilla vim settings (without plugins).
" Tested on vim 7.4.
"

if has('vim_starting')
    set nocompatible
endif

set encoding=utf-8
scriptencoding utf-8

filetype plugin indent on

" This is necessary to make some plugins work.
" E.g. gitgutter on Ubuntu 12.04
set shell=/bin/bash

if has('gui_running')
    set guifont=Source\ Code\ Pro:h18,Consolas:h18,Inconsolata:h18,Courier:h18
    " Number of pixel lines inserted between lines in addition to the
    " base line height.
    set linespace=4
    " a - "just works (tm)"
    " c - use console dialogs for simple choices.
    " i - use vim icon.
    " m - menubar is present.
    " g - grey nonactive menu items.
    " r - right scrollbar is always present.
    set guioptions=acimgr
else
    " 256 colors in terminal.
    set t_Co=256
    " Smooth redraw for fast terminal connections.
    set ttyfast
    " Don't redraw while executing scripts.
    set lazyredraw
    " Disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    if &term =~ '256color'
        set t_ut=
    endif
endif

if has('nvim')
    let g:VimHome = "~/.nvim"
else
    let g:VimHome = "~/.vim"
endif

if exists('+undofile')
    " undofile permits to use undos after exiting and restarting.
    set undofile
    " Don't forget to create a directory for undo files.
    let undo_dir = g:VimHome . '/undo/'
    execute('silent !mkdir -p ' . undo_dir)
    let &undodir = undo_dir
endif

if has('cryptv')
    " Use more secure encryption method.
    set cryptmethod=blowfish
endif

if has("gui_macvim") && has('mac')
    " Option -> Meta on mac.
    set macmeta
endif

if has('mouse')
    set mouse=a
    set mousemodel=popup_setpos
endif

if has('wildmenu')
    set wildmenu
    set wildignorecase
    " Complete to the longest common match and open wildmenu.
    " Then iterate over the wildmenu items.
    set wildmode=longest:full,full
    " Ignored by wildmenu completion.
    set wildignore=''
    " Logs.
    set wildignore+=*.log
    " Temp files.
    set wildignore+=*/tmp/*
    " Version control.
    set wildignore+=.svn,.git,.hg
    " Python stuff.
    set wildignore+=*.pyc,*.pyo,__pycache__
    " C stuff.
    set wildignore+=*.o,*.so
    " Binary files.
    set wildignore+=*.swp,*.dump,*.dmp,*.zip,*.tar,*.gz,*.7z
    " DB files.
    set wildignore+=*.db,*.sqlite
endif

" Regexps and al.
if v:version >= 704
    " The new Vim regex engine is currently slooooow as hell which makes syntax
    " highlighting slow, which introduces typing latency.
    " Consider removing this in the future when the new regex engine becomes
    " faster.
    set regexpengine=1
endif

" Colorscheme.
syntax on
set background=dark

" Turns off ALL error bells. Don't fuck my brain!
set noerrorbells
set visualbell
set t_vb=

" Set title of the window.
set title
" Set window title to "<filename> @ <filepath>"
function! s:MakeVimTitle()
    let new_title = expand('%:t') . ' @ ' . expand('%:p:h')
    return new_title
endfunction
" Update window title when changing buffers.
augroup vimrc_base_set_window_title
    autocmd!
    autocmd BufEnter * let &titlestring = s:MakeVimTitle()
augroup END

" Always show tabline.
set showtabline=2

" Always show statusline.
set laststatus=2
" Show currently edited ex command.
set showcmd
" I will NOT hit enter no continue!
set shortmess=tI
" Show current mode.
set showmode
" 1 line for ex command.
set cmdheight=1

" Split to the right and bottom of the current window
set splitbelow
set splitright
" Enable hidden buffers
set hidden
" A window can be reduced to its statusline.
set winminheight=0

" Indentation.
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround
set copyindent
set autoindent

" Code folding
" I don't want to see fold level markers.
set foldcolumn=0
set foldmethod=indent
set foldlevel=5

" Navigation
set number
set norelativenumber
set numberwidth=6
set cursorline
set guicursor+=a:blinkon0

let CursorColumnI = 0 " The cursor column position in INSERT.

augroup vimrc_base_insert_mode_tweaks
    autocmd!
    " Toggle cursor line.
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * set cursorline
    " Toggle paste and cursorline in insert mode.
    autocmd InsertEnter * set nocursorline
    autocmd InsertLeave * set cursorline nopaste

    " Don't move cursor 1 char back when leaving insert mode.
    autocmd InsertEnter * let CursorColumnI = col('.')
    autocmd CursorMovedI * let CursorColumnI = col('.')
    autocmd InsertLeave * if col('.') != CursorColumnI | call cursor(0, col('.') + 1) | endif
augroup END

set nocursorcolumn
set colorcolumn=80,100
" Show at least 3 lines below/above the cursor.
set scrolloff=3
" Show at least 10 columns before/after the cursor.
set sidescroll=1
set sidescrolloff=10
" Line and column rulers in statusline.
set ruler
set rulerformat="%l\:%c %P"
" Allow to put cursor outside of the text in V-Block mode only.
set virtualedit=block

" Search options.
" By default substitute all occurrences - not only the first one.
set gdefault
" Highlight last searched pattern occurrences.
set hlsearch
" Highlight as you type.
set incsearch
" Ignore pattern case when searching.
set ignorecase
" Don't ignore case if uppercase letters present in a pattern.
set smartcase

" Flash matching brackets.
set showmatch
set matchtime=3

" Vim internal encoding.
set encoding=utf-8
set ambiwidth=double
set fileformats=unix,dos,mac

" Don't wrap lines.
set nowrap
" But if we wrap them - wrap them by word boundaries
set linebreak
" Don't show invisible symbols.
set nolist
" Wrap lines in text files.
augroup vimrc_base_write_mode
    autocmd!
    autocmd BufNewFile,BufReadPost *.md,*.txt,*.rst set wrap linebreak nolist
augroup END
" Sets replacements for invisible characters + scrolloff characters.
set listchars=tab:▸⋅,nbsp:⋅,trail:⋅,eol:¬,extends:❯,precedes:❮
" Backspace can erase anything.
set backspace=indent,eol,start

" Misc
if has('clipboard')
    set clipboard=unnamed
endif
" Ask for confirmation when doing hard stuff...
set confirm
" Don't pollute system with temporary files.
set nobackup
set nowritebackup
set noswapfile
" Automatically read files modified outside of vim.
set autoread
" Write changes when switching files.
set autowrite
" Once upon a time...
set history=1000
set undolevels=1000

" CursorHold event frequency in ms. Used for UI updates by some plugins.
set updatetime=100
" Don't wait for escape codes. A fix for Esc lag in terminal.
set ttimeout
set ttimeoutlen=0

" Show completion menu in insert mode even if there is only one item in the
" completion list.
set completeopt=menuone

" Do not store global and local values in a session.
set ssop-=options
" Do not store folds.
set ssop-=folds

"
" Key mappings.
"

let mapleader = "\<SPACE>"
let maplocalleader = "\<SPACE>"

nnoremap <Leader>w :w<CR>
" TODO: it does not work.
nnoremap q: :q<CR>


" I can type :help on my own, thanks.
noremap  <F1> <Esc>
noremap! <F1> <Esc>
lnoremap <F1> <Esc>

" Make marks navigation easier.
noremap ' `
noremap ` '

" Allow to make mistakes when wq'ing.
cabbrev fw :wq
cabbrev qw :wq

" Start external commands with a single keystroke.
nnoremap ! :!

" Quit vim easily
nnoremap ZX :qall!<CR>

nnoremap Q q
nnoremap q <NOP>

" Up-down through long lines chunks.
noremap j h
noremap k gj
noremap <down> gj
inoremap <down> <C-o>gj
noremap h gk
noremap <up> gk
inoremap <up> <C-o>gk

" Don't open folds when jumping paragraph by paragraph.
" TODO: sometimes in operator-pending mode it jumps incorrectly, fix it.
noremap <expr> } foldclosed(search('^$', 'Wn')) == -1 ? "}" : "}j}"
noremap <expr> { foldclosed(search('^$', 'Wnb')) == -1 ? "{" : "{k{"

" Toggle "keep current line in the center of the screen" mode.
nnoremap <leader>C :let &scrolloff=999-&scrolloff<CR>

" Use ; to enter ex commands.
noremap ; :
" Repeat the last ex command by typing @; or @:.
noremap @; @:

" Redo with U.
noremap U <C-r>
" Copy until the end of line.
noremap Y y$
" Select all.
noremap <Leader>A ggVG
" Reselect the last visual area.
nnoremap <Leader>v gv
" Select the last pasted or changed chunk.
nnoremap <Leader>p `[v`]

" Don't loose selection after indenting in visual mode.
vnoremap < <gv
vnoremap > >gv

" Select (charwise) the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Turn of highlight by searching for a nonexistent (incorrect) pattern.
function! ResetSearchPattern()
    let @/ = ''
endfunction
noremap <Leader><Leader> :call ResetSearchPattern()<CR>

nnoremap K i<CR><Esc>h

onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

inoremap <C-e> <C-o>$
cnoremap <C-e> <end>
inoremap <C-a> <C-o>0
cnoremap <C-a> <home>
inoremap <C-k> <C-o>d$
inoremap <C-u> <C-o>d^

" Tabs and buffers.
nnoremap <Leader>n gt
nnoremap <Leader>N gT
nnoremap <leader>X :bd<CR>

" Easy window navigation
noremap <C-h> <C-w>k
noremap <C-j> <C-w>h
noremap <C-k> <C-w>j
noremap <C-l> <C-w>l

" Write it, matafaka!
nnoremap <C-W>e :w<CR>
nnoremap <C-W><C-E> :w<CR>
" Open alternative buffer in a split.
nnoremap <C-W>6 <C-W><C-^>
nnoremap <C-W><C-6> <C-W><C-^>

nnoremap <leader>cd :cd %:p:h<CR>
nnoremap <leader>lcd :lcd %:p:h<CR>

" TODO: it does not work after sourcing vimrc. Some plugin overrides it?
set pastetoggle=<F2>

function! ToggleCompletionPreview()
    if &completeopt =~? 'preview'
        set completeopt-=preview
        echo 'Preview off'
    else
        set completeopt+=preview
        echo 'Preview on'
    endif
endfunction
inoremap <C-Z> <C-o>:call ToggleCompletionPreview()<CR>
" TODO: set fixed previewheight.

"
" Some additional autocommands.
"

function! s:ReturnToLastFilePos()
    if line("'\"") > 0 && line("'\"") <= line('$')
        execute 'normal! g`"zvzz'
    endif
endfunction


" Make sure vim returns to the same line when you reopen a file.
augroup vimrc_base_return_to_the_last_pos
    autocmd!
    autocmd BufReadPost * :call s:ReturnToLastFilePos()
augroup END


augroup vimrc_base_git_diff
    autocmd!
    " Show Git diff in window split when committing git diff.
    autocmd FileType gitcommit DiffGitCached | wincmd p
    " Turn on spellcheck.
    autocmd BufRead COMMIT_EDITMSG setlocal spell!
augroup END


augroup vimrc_base_python
    autocmd!
    autocmd FileType python setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class,with
    autocmd FileType python setlocal tabstop=4
augroup END


augroup vimrc_base_vimscript
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END


function! BufferIsEmpty(n_buf)
    let is_modified = getbufvar(4, '&modified')
    let first_two_lines = getbufline(a:n_buf, 1, 2)
    return !is_modified && len(first_two_lines) == 1 && first_two_lines[0] == ''
endfunction

function! s:CloseHiddenBuffers()
    let visible_buffers = {}
    " Check buffers on every tabpage.
    for n_tab in range(1, tabpagenr('$'))
        " Mark every buffer attached to at least one window.
        for n_buf in tabpagebuflist(n_tab)
            let visible_buffers[n_buf] = 1
        endfor
    endfor

    " Check every buffer.
    let invisible_empty_buffers = []
    for n_buf in range(1, bufnr('$'))
        let is_invisible = bufexists(n_buf) && !has_key(visible_buffers, n_buf)
        let is_unnamed = empty(bufname(n_buf))
        let is_not_service = buflisted(n_buf)
        let is_empty = BufferIsEmpty(n_buf)
        if is_invisible && is_unnamed && is_not_service && is_empty
            call add(invisible_empty_buffers, n_buf)
        endif
    endfor

    if !empty(invisible_empty_buffers)
        execute 'bwipeout ' . join(invisible_empty_buffers, ' ')
    endif
endfun

augroup vimrc_base_close_hidden_empty_buffers
    autocmd!
    autocmd BufEnter * :call s:CloseHiddenBuffers()
augroup END

" TODO:
" <C-W> a, m, u, y are not mapped - map them!

"
" Abbreviations
"

iabbrev teh the
iabbrev fo of
iabbrev @@ dmitry.otroshchenko@gmail.com
" iabbrev @me Dmitry Otroshchenko
