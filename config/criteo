#!/usr/bin/env bash

alias mvn="mvn -Djava.awt.headless=true"

function join_by {
    local d=$1
    shift
    echo -n $1
    shift
    printf "%s" "${@/#/$d}"
}

#
# Kerberos
#

export NAME=d.otroshchenko

alias kinit='kinit -e aes128-cts-hmac-sha1-96'
alias kinit-full="kinit $NAME@CRITEOIS.LAN"
alias kloc="kinit $NAME"
alias kreinit='kdestroy && klist && kinit && klist'
alias openssl_brew=/usr/local/opt/openssl/bin/openssl

#
# Hadoop
#

HADOOP_COMMANDS_TO_ALIAS=(
    'test'
    'appendToFile'
    'cat'
    'chown'
    'copyFromLocal'
    'copyToLocal'
    'count'
    'cp'
    'du'
    'dus'
    'get'
    'ls'
    'mkdir'
    'moveFromLocal'
    'mv'
    'put'
    'rm'
    'rmr'
    'stat'
    'tail'
    'text'
    'touchz'
)
for cmd in ${HADOOP_COMMANDS_TO_ALIAS[@]}; do
    ALIAS_CMD="alias h$cmd=\"hadoop fs -$cmd\""
    eval $ALIAS_CMD
done

function hpcat {
    hadoop fs -text $1 | sed 's/^...../0a/' | xxd -p -r
}

function pailcat {
    hdfs dfs -text $1 | sed 's/^...../0a/' | xxd -p -r
}

function pa4pre_from_pa4() {
    CMD="hadoop distcp -m100 ${@:3} hdfs://pa4$1 $2"
    eval $CMD
}

function pa4_from_am5() {
    CMD="hadoop distcp -skipcrccheck -m100 ${@:3} webhdfs://am5$1 $2"
    eval $CMD
}


alias ylist="yarn application -list"
alias ystatus="yarn application -status"
alias ykill="yarn application -kill"
alias ylogs="yarn logs -applicationId"

function ssh_to() {
    HOST=$1
    USER=${Z:-$NAME}
    ssh -K $USER@$HOST ${@:2}
}

function scp_to() {
    HOST=$1
    SRC=$2
    DST=${3:-"."}
    USER=${Z:-$NAME}
    scp -r ${@:4} $SRC $USER@$HOST:/home/$USER/$DST
}

function scp_from() {
    HOST=$1
    SRC=$2
    DST=${3:-"."}
    USER=${Z:-$NAME}
    scp -r ${@:4} $USER@$HOST:/home/$USER/$SRC $DST
}

#
# Criteo servers
#

function add_aliases_for_server() {
    if [[ $# != 2 ]]; then
        echo 'Incorrect add_aliases_for_server() signature.'
        return 1
    fi

    SERVER_NAME=$1
    HOST=$2

    alias ssh$SERVER_NAME="ssh_to $HOST"
    alias to$SERVER_NAME="scp_to $HOST"
    alias from$SERVER_NAME="scp_from $HOST"

    SERVER_NAME_UPPER=$(echo $SERVER_NAME | awk '{print toupper($0)}' | awk '{sub(/-/, "_"); print}')
    export $SERVER_NAME_UPPER=$HOST
}

declare -A CRITEO_SERVERS

CRITEO_SERVERS[am5]='jobs-user.hpc.criteo.prod'
CRITEO_SERVERS[am5pre]='jobs-user.hpc.criteo.preprod'

CRITEO_SERVERS[pa4]='jobs-user.pa4.hpc.criteo.prod'
CRITEO_SERVERS[pa4-prod]='jobs-prod.pa4.hpc.criteo.prod'
CRITEO_SERVERS[pa4-testfwk]='jobs-testfwk.pa4.hpc.criteo.prod'

CRITEO_SERVERS[pa4pre]='jobs-user.pa4.hpc.criteo.preprod'
CRITEO_SERVERS[pa4pre-prod]='jobs-prod.pa4.hpc.criteo.preprod'
CRITEO_SERVERS[pa4pre-testfwk]='jobs-testfwk.pa4.hpc.criteo.preprod'

SHELL_NAME=$(ps h -p $$ -o args='' | cut -f1 -d' ')
if [[ $SHELL_NAME =~ 'zsh' ]]; then
    for SERVER_NAME in "${(@k)CRITEO_SERVERS}"; do
        add_aliases_for_server $SERVER_NAME ${CRITEO_SERVERS[$SERVER_NAME]}
    done
elif [[ $SHELL_NAME =~ 'bash' ]]; then
    for SERVER_NAME in  "${!CRITEO_SERVERS[@]}"; do
        add_aliases_for_server $SERVER_NAME ${CRITEO_SERVERS[$SERVER_NAME]}
    done
fi

function servers() {
    for SERVER_NAME in "${(@k)CRITEO_SERVERS}"; do
        echo "${SERVER_NAME}|${CRITEO_SERVERS[$SERVER_NAME]}"
    done | column -t -s "|"
}

function dm() {
    project_root=$(git rev-parse --show-toplevel)
    python "$project_root/manage.py" $@
}

alias dmnb='dm shell_plus --notebook'

alias pl='pylint -r n'

#
# JMOAB
#

# Required by Maven
export GIT_SSH=`which ssh`

function bootstrapgit() {
    gitdir=$(git rev-parse --git-dir)
    scp -p -P 29418 $NAME@review.criteois.lan:hooks/commit-msg ${gitdir}/hooks/
}

function fixjmoab {
    if [ ! -f pom.xml ]; then
        echo 'pom.xml not found.'
    else
        echo 'Deleting pom.xml.'
        rm pom.xml
    fi

    mvn bfs:create-pom -DmaxRetries=20
    mvn bfs:refresh-moab -DmaxRetries=20
    mvn bfs:refresh-sources
}

function nukemaven {
    read -p "Do you really want to nuke da maven (y/n)? " CONT
    if [ "$CONT" = "y" ]; then
        echo "FAIA1111111"
        rm -rf "~/.m2/repository"
    else
        echo "Later then..."
    fi
}

alias refresh-moab='mvn bfs:refresh-moab'
alias refresh-sources='mvn bfs:refresh-sources'
alias deploy='mvn clean install -DpackageForDeploy'

function moab_checkout() {
    PROJECTS=$(join_by , $@)
    mvn bfs:checkout -Dprojects=$PROJECTS
}

function fixintellij() {
    if [ ! -d '.idea' ]; then
        echo 'Not an Intellij root.'
        return
    fi

    find . -name '*.iml' -exec rm -rf {} \;
    rm -rf .idea
}

function setup_chrome_kerberos() {
    DOMAIN_SPEC='*.criteo.prod,*.criteo.preprod'
    defaults write com.google.Chrome AuthServerWhitelist $DOMAIN_SPEC
    defaults write com.google.Chrome AuthNegotiateDelegateWhitelist $DOMAIN_SPEC
    defaults write com.vivaldi.Vivaldi AuthServerWhitelist $DOMAIN_SPEC
    defaults write com.vivaldi.Vivaldi AuthNegotiateDelegateWhitelist $DOMAIN_SPEC
}

#
# Reco
#

RECOCOMPUTER_PATH="/home/$NAME/jars/criteo-hadoop-recocomputer.jar"
function protobuf_util_cat() {
    hadoop fs -text $2 | \
        java -cp $RECOCOMPUTER_PATH com.criteo.recommendation.babelfish.utils.ProtobufUtil $1 ${@:3}
}

function simprot() {
    protobuf_util_cat "ProductWithSimilarities" $@
}

function richprot() {
    protobuf_util_cat "EnrichedProduct" $@
}

function lightprot() {
    protobuf_util_cat "LightCatalogItem" $@
}

function imgprot() {
    protobuf_util_cat "com.criteo.recommendation.babelfish.hdfs.outputs.Image\$ProductImage" $@
}

function coevtprot() {
    protobuf_util_cat "com.criteo.hadoop.recocomputer.values.Coevent\$CoEvts" $@
}

function richcatimelineprot() {
    protobuf_util_cat "com.criteo.recommendation.babelfish.hdfs.outputs.Catimeline\$UserEvents" $@
}

function tokenstatsprot() {
    protobuf_util_cat "com.criteo.recommendation.babelfish.hdfs.outputs.TokenStat\$TokenStatForPartner" $@
}

# vagrant

function vagrant_run() {
    SCRIPT_PATH=$1
    shift
    vagrant scp $SCRIPT_PATH .
    echo "./$SCRIPT_PATH $@" | vagrant ssh -- -t
}

# For thrift

export PATH="/usr/local/opt/bison/bin:$PATH"
export PATH="/usr/local/opt/thrift@0.90/bin:$PATH"

autoload bashcompinit
bashcompinit

alias rg="rg -S"

export PATH="/Applications/mosek/8/tools/platform/osx64x86/bin:$PATH"

# added by Miniconda3 installer
export PATH="/Users/d.otroshchenko/.conda/bin:$PATH"

alias af="open ~/Applications/Autodesk\ Fusion\ 360.app"
